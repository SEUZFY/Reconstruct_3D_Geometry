    
    auto trans = GEO1016_A2::getNormalizeTransformMatrix(points_0);
    std::cout << "normalize transform matrix for points_0: \n";
    GEO1016_debugger::PrintMatrix33(trans.first);

    trans = GEO1016_A2::getNormalizeTransformMatrix(points_1);
    std::cout << "normalize transform matrix for points_1: \n";
    GEO1016_debugger::PrintMatrix33(trans.first);
    
    // -------------------------------------------------------------
    
    GEO1016_debugger::PrintPoints(points_1);  // before normalize
    auto np = GEO1016_A2::NormalizePoints(points_1);
    std::cout << "after normalize: \n";
    GEO1016_debugger::PrintPoints(np.first);  // after normalize

    // --------------------------------------------------------------

        std::cout << "\nTODO: I am going to implement the triangulation() function in the following file:" << std::endl
        << "\t    - triangulation_method.cpp\n\n";

    std::cout << "[Liangliang]:\n"
        "\tFeel free to use any provided data structures and functions. For your convenience, the\n"
        "\tfollowing three files implement basic linear algebra data structures and operations:\n"
        "\t    - Triangulation/matrix.h  Matrices of arbitrary dimensions and related functions.\n"
        "\t    - Triangulation/vector.h  Vectors of arbitrary dimensions and related functions.\n"
        "\t    - Triangulation/matrix_algo.h  Determinant, inverse, SVD, linear least-squares...\n"
        "\tPlease refer to the above files for a complete list of useful functions and their usage.\n\n"
        "\tIf you choose to implement the non-linear method for triangulation (optional task). Please\n"
        "\trefer to 'Tutorial_NonlinearLeastSquares/main.cpp' for an example and some explanations.\n\n"
        "\tIn your final submission, please\n"
        "\t    - delete ALL unrelated test or debug code and avoid unnecessary output.\n"
        "\t    - include all the source code (and please do NOT modify the structure of the directories).\n"
        "\t    - do NOT include the 'build' directory (which contains the intermediate files in a build step).\n"
        "\t    - make sure your code compiles and can reproduce your results without ANY modification.\n\n" << std::flush;

    /// Below are a few examples showing some useful data structures and APIs.

    /// define a 2D vector/point
    Vector2D b(1.1, 2.2);

    /// define a 3D vector/point
    Vector3D a(1.1, 2.2, 3.3);

    /// get the Cartesian coordinates of a (a is treated as Homogeneous coordinates)
    Vector2D p = a.cartesian();

    /// get the Homogeneous coordinates of p
    Vector3D q = p.homogeneous();

    /// define a 3 by 3 matrix (and all elements initialized to 0.0)
    Matrix33 A;

    /// define and initialize a 3 by 3 matrix
    Matrix33 T1(1.1, 2.2, 3.3,
        0, 2.2, 3.3,
        0, 0, 1);

    /// define and initialize a 3 by 4 matrix
    Matrix34 M1(1.1, 2.2, 3.3, 0,
        0, 2.2, 3.3, 1,
        0, 0, 1, 1);

    /// set first row by a vector
    //M.set_row(0, Vector4D(1.1, 2.2, 3.3, 4.4));

    /// set second column by a vector
    //M.set_column(1, Vector3D(5.5, 5.5, 5.5));

    /// define a 15 by 9 matrix (and all elements initialized to 0.0)
    Matrix W(15, 9, 0.0);
    /// set the first row by a 9-dimensional vector
    W.set_row(0, { 0, 1, 2, 3, 4, 5, 6, 7, 8 }); // {....} is equivalent to a std::vector<double>

    /// get the number of rows.
    int num_rows = W.rows();

    /// get the number of columns.
    int num_cols = W.cols();

    /// get the the element at row 1 and column 2
    double value = W(1, 2);

    /// get the last column of a matrix
    Vector last_column = W.get_column(W.cols() - 1);

    /// define a 3 by 3 identity matrix
    Matrix33 I = Matrix::identity(3, 3, 1.0);

    /// matrix-vector product
    //Vector3D v = M * Vector4D(1, 2, 3, 4); // M is 3 by 4

    ///For more functions of Matrix and Vector, please refer to 'matrix.h' and 'vector.h'


    // -----------------------------------------------------------------------------------------------


    // combination R:0, t:0 ----------------------------------------------------------------------
        R = rt.possibleR[0]; t = rt.possiblet[0];
        if ((determinant(R) - 1.0) < 1e-8)  // determinant(R) = 1.0 (within a tiny threshold)
        {
            M_ = getProjectionMatrix(K, R, t);

            // (1) points in camera 1 - World CRS
            res.points3D = getTriangulatedPoints3D(M, M_, points_0, points_1);  // in World_CRS
            count[0].first = CountPositiveZ(res.points3D);

            // (2) points in camera 2 - Q = R * P + t
            for (auto& p : res.points3D)
                p = R * p + t;
            count[0].second = CountPositiveZ(res.points3D);

            res.points3D.clear();  // for next use
        }
        // combination R:0, t:0 ----------------------------------------------------------------------
        

        // combination R:0, t:1 ----------------------------------------------------------------------
        t = rt.possiblet[1];
        if ((determinant(R) - 1.0) < 1e-8)  // determinant(R) = 1.0 (within a tiny threshold)
        {
            M_ = getProjectionMatrix(K, R, t);

            // (1) points in camera 1 - World CRS
            res.points3D = getTriangulatedPoints3D(M, M_, points_0, points_1);  // in World_CRS
            count[1].first = CountPositiveZ(res.points3D);

            // (2) points in camera 2 - Q = R * P + t
            for (auto& p : res.points3D)
                p = R * p + t;
            count[1].second = CountPositiveZ(res.points3D);

            res.points3D.clear();  // for next use
        }
        // combination R:0, t:1 ----------------------------------------------------------------------
        

        // combination R:1, t:0 ----------------------------------------------------------------------
        R = rt.possibleR[1]; t = rt.possiblet[0];
        if ((determinant(R) - 1.0) < 1e-8)  // determinant(R) = 1.0 (within a tiny threshold)
        {
            M_ = getProjectionMatrix(K, R, t);

            // (1) points in camera 1 - World CRS
            res.points3D = getTriangulatedPoints3D(M, M_, points_0, points_1);  // in World_CRS
            count[2].first = CountPositiveZ(res.points3D);

            // (2) points in camera 2 - Q = R * P + t
            for (auto& p : res.points3D)
                p = R * p + t;
            count[2].second = CountPositiveZ(res.points3D);

            res.points3D.clear();  // for next use
        }
        // combination R:1, t:0 ----------------------------------------------------------------------
        
        
        // combination R:1, t:1 ----------------------------------------------------------------------
        t = rt.possiblet[1];
        if ((determinant(R) - 1.0) < 1e-8)  // determinant(R) = 1.0 (within a tiny threshold)
        {
            M_ = getProjectionMatrix(K, R, t);

            // (1) points in camera 1 - World CRS
            res.points3D = getTriangulatedPoints3D(M, M_, points_0, points_1);  // in World_CRS
            count[3].first = CountPositiveZ(res.points3D);

            // (2) points in camera 2 - Q = R * P + t
            for (auto& p : res.points3D)
                p = R * p + t;
            count[3].second = CountPositiveZ(res.points3D);

            res.points3D.clear();  // for next use
        }
        // combination R:1, t:0 ----------------------------------------------------------------------



        // -------------------------------------------------------------------------------------------



            // TODO: Don't forget to
    //          - write your recovered 3D points into 'points_3d' (so the viewer can visualize the 3D points for you);
    //          - write the recovered relative pose into R and t (the view will be updated as seen from the 2nd camera,
    //            which can help you check if R and t are correct).
    //       You must return either 'true' or 'false' to indicate whether the triangulation was successful (so the
    //       viewer will be notified to visualize the 3D points and update the view).
    //       There are a few cases you should return 'false' instead, for example:
    //          - function not implemented yet;
    //          - input not valid (e.g., not enough points, point numbers don't match);
    //          - encountered failure in any step.



    // ----------------------------------------------------------------------------------------------------


   
    /*std::cout << "test: " << '\n';
    int i{}, k{};
    while (i < size && k < points_3d.size())
    {
        std::cout << "x: " << x[i] << "," << x[i + 1] << "," << x[i + 2] << '\n';
        std::cout << "o: " << points_3d[k].x() << "," << points_3d[k].y() << "," << points_3d[k].z() << '\n';
        std::cout << '\n';
       
        i += 3;
        k += 1;
    }*/



    // -----------------------------------------------------------------------------------------------------



    /**
 * Copyright (C) 2015 by Liangliang Nan (liangliang.nan@gmail.com)
 * https://3d.bk.tudelft.nl/liangliang/
 *
 * This file is part of Easy3D. If it is useful in your research/work,
 * I would be grateful if you show your appreciation by citing it:
 * ------------------------------------------------------------------
 *      Liangliang Nan.
 *      Easy3D: a lightweight, easy-to-use, and efficient C++
 *      library for processing and rendering 3D data. 2018.
 * ------------------------------------------------------------------
 * Easy3D is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License Version 3
 * as published by the Free Software Foundation.
 *
 * Easy3D is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include <iostream>
#include <easy3d/optimizer/optimizer_lm.h>
#include <Triangulation/triangulation.h>
#include <Triangulation/matrix_algo.h>


using namespace easy3d;



/// To use the Levenberg-Marquardt method to solve a non-linear least squares method, we need to define our own
/// objective function that inherits 'Objective_LM'.

// user-defined data
struct Mydata {
    double s = 2.0;
    std::vector<double> base;
    Mydata()
    {
        base.reserve(3);
        base.emplace_back(1.0);
        base.emplace_back(1.0);
        base.emplace_back(1.0);
    }
};

void setOptimizeVariables(double* x, int size, const std::vector<Vector3D>& points_3d)
{
    int i{}, k{};
    while (i < size && k < points_3d.size())
    {
        x[i] = points_3d[k].x();
        x[i + 1] = points_3d[k].y();
        x[i + 2] = points_3d[k].z();

        int a = i, b = i + 1, c = i + 2;
        std::cout << "a: " << a << "b: " << b << "c: " << c << '\n';

        i += 3;
        k += 1;

        
    }
}

class MyObjective : public Objective_LM {
public:
    MyObjective(int num_func, int num_var, Mydata* data_) : Objective_LM(num_func, num_var, data_) 
    {
        data = data_;
    }

    /**
     *  Calculate the values of each function at x and return the function values as a vector in fvec.
     *  @param  x           The current values of variables.
     *  @param  fvec        Return the value vector of all the functions.
     *  @return Return a negative value to terminate.
     *
     *  NOTE: This function implements f = (x0 - 1.0)^2 + (x1 - 1.0)^2. A client problem must implement
     *      this function to evaluate the values of each function in the expression of x.
     */
    int evaluate(const double *x, double *fvec) {
        //fvec[0] = x[0] - 1.0;
        //fvec[1] = x[1] - 1.0;
        for (int i = 0; i < 3; ++i)
            fvec[i] = x[i] - data->base[i];
        return 0;
    }
protected:
    Mydata* data;
};


int main(int argc, char **argv) {
    /// initialize the objective function
    /// 1st argument is the number of functions, 2nd the number of variables
    /// the number of functions must > 1 ?
    /// 
    /// user-defined daya
    Mydata data;
    MyObjective obj(3, 3, &data);

    /// create an instance of the Levenberg-Marquardt (LM for short) optimizer
    Optimizer_LM lm;

    /// initialized the variables. Later x will be modified after optimization.
    /// initial values will affect the results
    std::vector<double> x = { 5.0, -16.0, 3.0};

    /// optimize (i.e., minimizing the objective function).
    bool status = lm.optimize(&obj, x);

    /// retrieve the result.
    //std::cout << "the solution is:     " << x[0] << ", " << x[1] << "," << x[2] << std::endl;
    //std::cout << "the expected result: 0, 0" << std::endl;

    //return status;

    /*int size = 480;
    double x[480] = { 0 };
    std::vector<Vector3D> points_3d(160, Vector3D(0, 0, 0));
    setOptimizeVariables(x, size, points_3d);*/

    return 0;
}


Matrix34 M = data->M;  /* projection matrix */
            int k{}, m{}, n{};  /* k: index of points_0 m: index of x(store variables) n: functions*/
            while (k < data->points_0.size())
            {
                double homo_x = M(0, 0) * x[m] + M(0, 1) * x[m + 1] + M(0, 2) * x[m + 2] + M(0, 3) * x[m + 3];
                double homo_y = M(1, 0) * x[m] + M(1, 1) * x[m + 1] + M(1, 2) * x[m + 2] + M(1, 3) * x[m + 3];
                double homo_z = M(2, 0) * x[m] + M(2, 1) * x[m + 1] + M(2, 2) * x[m + 2] + M(2, 3) * x[m + 3];
                double cal_x = abs(homo_z) > 1e-8 ? (homo_x / homo_z) : homo_x;
                double cal_y = abs(homo_z) > 1e-8 ? (homo_y / homo_z) : homo_y;

                const Vector2D& original_2d_point = data->points_0[k];
                fvec[n]   = cal_x - original_2d_point.x();
                fvec[n+1] = cal_y - original_2d_point.y();

                k += 1;
                m += 4;
                n += 2;

                // test 
                std::cout << k << '\n';
            }
